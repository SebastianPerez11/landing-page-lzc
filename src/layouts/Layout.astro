---
interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/png" sizes="180x180" href="/assets/icon/LogoIcon.png" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body id="body" class="bg-[#1A1A1A] w-full">
    <slot />
  </body>
</html>
<style is:global>
  html {
    color-scheme: dark;
    scroll-behavior: smooth;
  }

  * {
    line-height: normal;
  }

  @layer {
    input[type="number"]::-webkit-outer-spin-button,
    input[type="number"]::-webkit-inner-spin-button,
    input[type="number"] {
      -webkit-appearance: none;
      margin: 0;
      -moz-appearance: textfield !important;
    }
  }
</style>

<script data-astro-rerun type="module">
  const iconClose = document.querySelector("#iconClose");
  const iconHamburger = document.querySelector("#iconHamburger");
  const menuHidden = document.querySelector("#menuHidden");
  const body = document.querySelector("#body");

  const openMenu = () => {
    iconHamburger.addEventListener("click", () => {
      menuHidden.classList.remove("translate-x-[100%]");
      iconHamburger.classList.add("opacity-0");
      iconClose.classList.add("opacity-100");
      iconClose.classList.remove("pointer-events-none");
      body.classList.add("fixed");
    });
  };

  const closeMenu = () => {
    iconClose.addEventListener("click", () => {
      menuHidden.classList.add("translate-x-[100%]");
      iconHamburger.classList.remove("opacity-0");
      iconClose.classList.remove("opacity-100");
      iconClose.classList.add("pointer-events-none");
      body.classList.remove("fixed");
    });
  };

  const linksMobile = document.querySelectorAll(".linksMobile");

  const linkActive = () => {
    linksMobile.forEach((link) => {
      link.addEventListener("click", () => {
        menuHidden.classList.add("translate-x-[100%]");
        iconClose.classList.remove("opacity-100");
        iconHamburger.classList.remove("opacity-0");
        iconClose.classList.add("pointer-events-none");
        body.classList.remove("fixed");
      });
    });
  };

  // Función para verificar el tamaño de la ventana y eliminar una clase
  function resetWindow() {
    const widthWindow = 764; // Define el ancho deseado en píxeles
    const body = document.body;

    if (window.innerWidth > widthWindow) {
      body.classList.remove("fixed"); // Elimina la clase si el ancho es menor al deseado
    }
  }

  // Escuchar el evento resize de la ventana
  window.addEventListener("resize", resetWindow);

  // Ejecutar la función una vez al cargar la página

  openMenu();
  closeMenu();
  resetWindow();
  linkActive();

  const contactButton = document.querySelector("#contactButton");
  const form = document.querySelector("#form");
  const iconCloseForm = document.querySelector("#iconCloseForm");

  const openForm = () => {
    contactButton.addEventListener("click", () => {
      form.classList.remove("hidden");
      form.classList.add("flex");
      body.classList.add("fixed");
      body.classList.add("h-screen");
    });
  };

  const closeForm = () => {
    iconCloseForm.addEventListener("click", () => {
      form.classList.add("hidden");
      form.classList.remove("flex");
      body.classList.remove("fixed");
      body.classList.remove("h-screen");
    });
  };

  openForm();
  closeForm();
  resetWindow();
</script>
